name: Create, Test, and Publish Dotnet Release

on:
  push:
    branches: 
      - 'master'
  pull_request:
    branches: 
      - 'master'

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and cache Docker image
        run: |
          docker build --no-cache -t ebram100/dierentuinn-name:${{ github.ref_name }} --target build --build-arg "INCLUDE_UNITTESTING=true" -f ./Dierentuinn/Dockerfile .

  # unittesting:
  #   runs-on: [self-hosted, Linux, ARM64]
  #   needs: build
  #   steps:
  #     - name: Run dotnet tests inside Docker container
  #       run: docker run --entrypoint "" ebram100/dierentuinn-name:${{ github.ref_name }} dotnet test

  sonarcloud:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'  # Adjust this version as needed

      - name: Setup Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Install SonarCloud Scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/home/runner/.dotnet/tools"

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin /k:"ebram101_dierentuinn-devops" /o:"ebram101" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  prepare-release:
    runs-on: [self-hosted, Linux, ARM64]
    needs: sonarcloud
    steps:
      - name: Docker build as final
        run: |
          docker build -t ebram100/dierentuinn-name:${{ github.ref_name }} --target final --build-arg "INCLUDE_UNITTESTING=true" -f ./Dierentuinn/Dockerfile .

  push-docker-hub:
    runs-on: [self-hosted, Linux, ARM64]
    needs: prepare-release
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ebram100/dierentuinn-name:${{ github.ref_name }}

  deploy:
    runs-on: [self-hosted, Linux, ARM64]
    needs: push-docker-hub
    env:
      KUBECONFIG: ./config.yml
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Kubernetes host
        run: |
          echo "${{ secrets.KUBECONFIG }}" > ./config.yml
          kubectl apply --validate=false -f ./Dierentuinn/deploy.yaml
